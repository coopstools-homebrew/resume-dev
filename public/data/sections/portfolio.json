{
    "disabled": false,
    "locales": {
        "en": {
            "title": "<span class='text-primary'>Portfolio</span>",
            "description": "Explore a selection of my recent projects and creative works, in no particular order.<br>Click for more info."
        }
    },

    "subcategories": [
        {
            "id": "use",
            "locales": {
                "en": {"title": "For User"}
            }
        },
        {
            "id": "learning",
            "locales": {
                "en": {"title": "For Learning"}
            }
        }
    ],

    "items": {
        "use": [
            {
                "id": "resumepage",
                "title": "Resume WebPage",
                "logoUrl": "images/portfolio/resumepage.png",
                "links": [
                    {"faIcon": "fa-brands fa-github-alt", "href": "https://github.com/coopstools/resume", "id": "Resume Code Repo"},
                    {"faIcon": "fa-solid fa-globe", "href": "https://coopstools.com", "id": "Here"}
                ],
                "locales": {
                    "en": {
                        "description": "Took a basic template and figured out how to rewrite parts to fit my needs. Updated core code to disable certain tabs, change icon selections, and filter configs.",
                        "tags": ["webpage", "profession"]
                    }
                }
            },

            {
                "id": "skirts",
                "title": "Ballet Skirts",
                "logoUrl": "images/portfolio/skirt_backstage.jpg",
                "links": [
                    {"faIcon": "fa-brands fa-square-bluesky", "href": "https://bsky.app/profile/jamesrcooper.bsky.social/post/3lk23gskoas2m", "id": "Bluesky Post"}
                ],
                "locales": {
                    "en": {
                        "description": "Worked with a choreographer to plan out their needs. Then sewed together, soldered together, and programmed light-up skirt with multiple modes that would change through the show.",
                        "tags": ["dance", "hardware"]
                    }
                }
            }
        ],

    "learning": [
            {
                "id": "nes",
                "title": "NES Hellord",
                "logoUrl": "images/portfolio/hellorld.png",
                "links": [
                    {"faIcon": "fa-solid fa-blog", "href": "https://github.com/Nakazoto/Hellorld/wiki/Almost-There#nes-nintendo-entertainment-system", "id": "Nakazoto Wiki/Blog"},
                    {"faIcon": "fa-brands fa-github-alt", "href": "https://github.com/coopstools/nes", "id": "NES Code Repo"}
                ],
                "locales": {
                    "en": {
                        "description": "Wrote a Hellord! program ('Hello, World!' where the bytes get mixed up) for an NES. This was part of a challenge posted by Nakazoto's blog/wiki. Sadly, it was only run on an emulator as I lacked the hardware. In the end, the program allos a user to move the words around the screen.<br><br>For me, this was about re-learning assembly on a super simple architecture, the Nintendo's 8502. It was also a fun challenge as I had to do the graphic design using the really nifty sprite render that the NES engineers created for the limited memory available in the NES.",
                        "tags": ["assembly", "8502"]
                    }
                }
            },

            {
                "id": "brainf**k",
                "title": "BrainF**k Interpreter and REPL (ongoing)",
                "logoUrl": "images/portfolio/bf.png",
                "links": [
                    {"faIcon": "fa-brands fa-github-alt", "href": "https://github.com/coopstools/brainf-k?tab=readme-ov-file#brainf-k", "id": "Interpreter and REPL Repo"}
                ],
                "locales": {
                    "en": {
                        "description": "In addition to the interpreter and REPL, there is a folder of examples of code I wrote, both learning the BF language and using it to test my interpreter. I am particularly proud of the N-element sorting algorithm, which uses bubble sort.<br><br>I wanted to build an interpreter from scratch with no guides. So, I chose a language that was explicitly designed to have the shortest interpreter.",
                        "tags": ["programming language", "esoteric"]
                    }
                }
            },

            {
                "id": "k8s",
                "title": "K8S Deployments in Git(Hub)Ops",
                "logoUrl": "images/portfolio/tower.jpg",
                "links": [
                    {"faIcon": "fa-brands fa-github-alt", "href": "https://github.com/coopstools-homebrew", "id": "K8s Orchestration Repos"}
                ],
                "locales": {
                    "en": {
                        "description": "The linked code is a series of services, which work with GitHub workflows and secret management, to deploy services to a k8s instance. It also includes some of the services that were deployed, such as a tracker to see the current status of the cluster.<br><br>This code was used to deploy both to a Digital Ocean instance and a k4s instance running on baremetal. The baremetal included a raspberry pi as the core node, and a tower as the worker node.",
                        "tags": ["baremetal", "k4s", "gitOps", "ci/cd"]
                    }
                }
            }
        ]
    }
}